
services:
  # Main Video Streaming Application with automatic GPU/CPU detection
  dispatch-monitoring:
    build:
      context: .
      dockerfile: Dockerfile
    image: dispatch-monitoring:latest
    container_name: dispatch-monitoring-app
    runtime: nvidia
    ports:
      - "5002:5002"
    volumes:
      - ./models:/app/models
      - ./results:/app/results
      - ./Dataset:/app/Dataset
      - ./feedback.db:/app/feedback.db
      - ./testing_video.mp4:/app/testing_video.mp4:ro
    environment:
      - PYTHONUNBUFFERED=1
      - NVIDIA_VISIBLE_DEVICES=all
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - dispatch-network

  # Training Service for Detection Models with automatic GPU/CPU detection
  training-detection:
    build:
      context: .
      dockerfile: Dockerfile
    image: dispatch-monitoring:latest
    container_name: dispatch-training-detection
    runtime: nvidia
    profiles: ["training"]
    volumes:
      - ./models:/app/models
      - ./results:/app/results
      - ./Dataset:/app/Dataset
      - training-cache:/app/.cache
    environment:
      - PYTHONUNBUFFERED=1
      - NVIDIA_VISIBLE_DEVICES=all
    command: ["python", "training/train_detection.py"]
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    networks:
      - dispatch-network

  # Training Service for Classification Models with automatic GPU/CPU detection
  training-classification:
    build:
      context: .
      dockerfile: Dockerfile
    image: dispatch-monitoring:latest
    container_name: dispatch-training-classification
    runtime: nvidia
    profiles: ["training"]
    volumes:
      - ./models:/app/models
      - ./results:/app/results
      - ./Dataset:/app/Dataset
      - training-cache:/app/.cache
    environment:
      - PYTHONUNBUFFERED=1
      - NVIDIA_VISIBLE_DEVICES=all
    command: ["python", "training/train_classification.py"]
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    networks:
      - dispatch-network

  # Database Service (for future expansion)
  database:
    image: postgres:15-alpine
    container_name: dispatch-database
    profiles: ["database"]
    environment:
      - POSTGRES_DB=dispatch_monitoring
      - POSTGRES_USER=dispatch_user
      - POSTGRES_PASSWORD=dispatch_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - dispatch-network

  # File Server for Model and Result Management
  file-server:
    image: nginx:alpine
    container_name: dispatch-file-server
    profiles: ["fileserver"]
    ports:
      - "8080:80"
    volumes:
      - ./models:/usr/share/nginx/html/models:ro
      - ./results:/usr/share/nginx/html/results:ro
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    restart: unless-stopped
    networks:
      - dispatch-network

  # GPU Resource Monitor
  gpu-monitor:
    image: nvidia/cuda:11.8.0-devel-ubuntu22.04
    container_name: dispatch-gpu-monitor
    profiles: ["monitoring"]
    command: ["nvidia-smi", "dmon", "-s", "pucvmet", "-d", "5"]
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: unless-stopped
    networks:
      - dispatch-network

# Named volumes for persistent storage
volumes:
  postgres-data:
    driver: local
  video-data:
    driver: local
  training-cache:
    driver: local

# Custom network for service communication
networks:
  dispatch-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 